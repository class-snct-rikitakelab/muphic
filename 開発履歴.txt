==============================================================================================================
                                               muphic 開発履歴
==============================================================================================================
  バージョン管理                    |  muphic プロジェクト            バージョン	備考
   ｖ.ｘ.ｙ.ｚ                      |   └ muphic 本体                ver.7.6.1.1	ver.7 は開発用バージョン
   │ │ │ └ バグフィクス         |       ├ ひとりで音楽モード     ver.2.2.1.0	
   │ │ └―- 改良                 |       ├ つなげて音楽モード     ver.1.3.1.3	新システム未実装
   │ └――― 機能追加             |       ├ ものがたり音楽モード   ver.2.2.0.0	
   └――――- リリース             |       ├ 楽譜画面               ver.1.3.1.0	
  本体は ver.7 以降が新システム     |       ├ チュートリアル         ver.1.3.3.0	新システム未実装
  各画面は ver.2 以降が新システム   |       └ 音声機能               ver.1.1.0.0	新システム未実装
==============================================================================================================
 ▽ : その日の作業予定項目                ｜ ToDo＆Memo:
 ○ : その日の作業完了項目                ｜  ・
 ☆ : その日出現したMANDOMな項目・疑問点  ｜  ・
 ◇ : その日の作業による各部のバージョン  ｜  ・
==============================================================================================================
  参考Webサイト:  http://www.atmarkit.co.jp/fdotnet/csharp_abc2/index/index.html  ---  C# 基礎/応用
                  http://www.atmarkit.co.jp/fdotnet/dotnettips/index/index.html -----  .NET TIPS
                  http://dobon.net/  ------------------------------------------------  .NET TIPS
                  http://homepage3.nifty.com/midori_no_bike/CS/  --------------------  C# TIPS
                  http://hiros-dot.net/  --------------------------------------------  .NET TIPS
                  http://ufcpp.net/study/csharp/  -----------------------------------  C# 基礎
                  http://sorceryforce.com/programing/  ------------------------------  Managed DirectX 基礎
                  http://www.kumei.ne.jp/c_lang/  -----------------------------------  C# 基礎
                  http://www.asahi-net.or.jp/~dp8h-izn/cs_coding_standard.html  -----  .NET コーディング標準
==============================================================================================================
100314 〜
	システム最終調整開始
	残りの作業
	・動作設定ツールの調整
	
	
==============================================================================================================
091100 〜
	開発履歴ふっかつ
	バグと必要な機能 覚え書き
	・成果物管理画面で、対象フォルダが空の場合にスクロールボタンが押せてしまう（押すと落ちる
	・トップ画面から名前を入力できるようにする
		→ 名前の入力が完了するまで他のボタンを押せなくするオプションを作成すべき
	・動作設定ツールの動作モードタブ内は、モード毎にパネル切り替えた方が良いね  作るの面倒だけど
	・作曲練習画面
		→ 練習画面への遷移はどうするか？
	・題名入力画面で入力できる文字の追加  句読点など
		→ ただし、句読点を許可する場合と許可しない場合に分けられる用にした方がよい
	
	▽動作設定ツール  必要項目
		・児童モード時  シフトキーによる制限を設ける設定
		・児童モード時  プレイヤー名が未入力状態の場合、各画面へ遷移できなくするかどうか
		・プレイヤー人数とプレイヤー名設定、またプレイヤー名を保持するかどうか

	○トップ画面からプレイヤー名を入力できるように改良 ver.7.16.0.0
		→ 題名入力画面を汎用題名表示クラスを使用するように改良  汎用題名表示クラスが偉大すぎる…
		→ プレイヤー名が未入力の場合は作曲画面と物語創作画面に遷移できない機能を実装  あとは設定ツール
		→ プレイヤー名をバックアップする機能を実装  [おわり] ボタンで正常終了時のみバックアップを削除できる
	
	▽プレイヤー名入力画面
		・性別の話すっかり忘れてたよ
		・名前欄を左にズラし、男女選択ボタンを配置する。
		・楽譜ボタンサイズで水色とピンク。ラベルは物語のスタンプ選択ボタンの流用で。
		・楽譜ボタンのピンクが必要なので、コレを機にボタン背景画像も組み直した方がいいかもしれないorz
	
	○プレイヤー名入力画面で性別を入力できるように改良 ver.7.16.1.0
		→ 通常は ON 画像、マウスオーバーと選択時に AQUA か PINK のボタン背景となるようにした
		→ 入力中でないプレイヤーの性別は、選択済みの性別ボタンのみ表示し、選択されていない性別ボタンは非表示
	
	○キーボード入力の処理を DirectInput に置き換え ver.7.16.2.2
		→ Windows キーを殺した  これでキーボード操作で誤操作が発生する可能性が減ったと思う
	
	▽性別を物語データに保存させる (現状 string のジェネリックコレクションなので、Author クラスとか必要かも)
	▽半角/全角キーがトグルモードなので、正直小学生には使えないと思う (画面のボタンでのみ切り替えか…)
	
	○性別を保存させるよう改良
		→ 作者情報クラス Author を作成。作品データクラス StoryData らと共に、PlayerWorks 名前空間に配置
		→ NameInputScreen 内で宣言していた性別の列挙子も PlayerWorks 名前空間に移動
		→ 物語データの作者情報を string のジェネリックコレクションから、Author のジェネリックコレクションに
		→ 印刷等の処理時は今まで通り string のジェネリックコレクションを別途生成して実行
 	
--------------------------------------------------------------------------------------------------------------
                                 デスマすぎて履歴書く暇すらありませんでした☆
--------------------------------------------------------------------------------------------------------------
090801 〜 090831
	○楽譜画面完成 (タイ表示除く)
	
	○構成設定ツール作成中...
	○構成設定ファイルからの設定読み込み機能実装
	◇muphic ver.7.9.0.0

	▽利用する PC によって、児童の判別を行わなければならない
	▽講師用 PC からは、どの児童が作品を提出してきたかを識別できなければならない
	
--------------------------------------------------------------------------------------------------------------
090703 〜 090705
	○一覧ファイル作成ツールを開発
		→ 読み込みはリストボックスへの D&D で
		→ 読み込み自体は BackgroundWorker で実行
		→ XML で保存し、アーカイブに格納 (ConsolidatedImages.texturelist)
		→ 起動時、TexuteFileManager 生成と共に一覧ファイル読み込み
	
	○楽譜画面クラス開発開始
		→ 楽譜生成メソッドが完成  基本的には旧システムと同じ方法 (変数の扱い等若干変更)
		→ 
--------------------------------------------------------------------------------------------------------------
090702
	○もう７月なんだぜ…
	
	○統合画像管理方法の変更
		→ 今の方法が管理しづらいため
		→ 統合画像はある程度分割 (東方みたく目的・役割別に！)
		   一覧ファイルは専用の管理ツール作り、１つのファイルにまとめて起動時に全て読む	
--------------------------------------------------------------------------------------------------------------
090629
	○バグフィクス
		→ 作曲中、和音３音配置済みの場合に縦への動物の移動ができなかった不具合を修正
	
	○.settings による座標一元管理を廃止してみる
		→ 各画面の Parts 名前空間に Locations クラスを作成し、静的なプロパティで座標を管理
		→ この方式で行うかは微妙
		
	○画像の読み込みを更に早くする方法
		→ アーカイブ化する時点で DirectX の Texture にしてしまえばいい
		→ アーカイブから展開する時間はほぼゼロだったので、管理しやすいよう画像を分割するのもアリ
		→ 画像を複数にする場合は、リソース文字列にセミコロンで接続すればいい？
	○↑無理だった  Texture 生成には Device が必要。別な方法を考える...
--------------------------------------------------------------------------------------------------------------
090614
	○アーカイブを暗号化
		→ ヘッダ部とファイルリスト部は全て XOR 暗号化
		→ テキストファイル等サイズが小さく簡単に改変できるものも XOR 暗号化
		→ 暗号化は、１バイトずつキーとの XOR 演算で実行。キーは配列番号やファイルサイズで改変

	◇muphic ver.7.6.1.1
--------------------------------------------------------------------------------------------------------------
090606 〜 090608
	○祝！就活終了  日立ソフトウェアエンジニアリング株式会社
	○muphic の開発を再開
	
	○ファイルアーカイバ完成
		→ muphic 内に ArchiveController クラス作成  アーカイブ展開機能のみ提供
		   アーカイブファイル１つに対しコントローラ１つ使用 (コントローラ内に FileStream を保持)
		→ アーカイブ作成ソフトを開発  ArchiveController を継承した ArchiveControllerPlus クラス作成
		   Plus にはアーカイブ作成機能を追加
		→ アーカイブは以下により構成
			 ・ヘッダ部 (先頭 40 バイト … ファイルリスト部のサイズを保持)
			 ・ファイルリスト部 (FileInfoList クラスをシリアル化しバイト配列に変換して保存
			                     アーカイブ内に含まれるファイルのファイル名･開始位置･サイズを保持)
			 ・データ部 (残りぜんぶ)
		→ コントローラのインスタンス生成時にヘッダ部とファイルリスト部を読み込み、後に必要に応じてデータ取得
	
	○画像ソースと音声ソースをアーカイブ内から取得するよう修正
		→ 画像と音声ソースは全て data01.dat にアーカイブ化 (data02.dat 以降が作られるかは不明...)
		→ ArchiveFileManager 作成
		   muphic が起動したら data01.dat をオープンし、要求があればデータを返す。ぶっちゃけそれだけ
		→ タイムラグ等の問題は現在のところ無し
		   画面遷移時間はこれまでとほぼ変わらない模様 (当たり前か)

--------------------------------------------------------------------------------------------------------------
090326
	○動作設定に関するコードの作成開始
	○どう頑張ってもアプリケーション設定 (.settings) の構成ファイルの位置は変えられないらしい…
		→ 設定プロバイダ自作すれば可能？ でも面倒すぎる
		→ 設定管理クラス自作すればいい
		
	○ConfigurationManager 復活
		→ 現時点では、ユーザーが変更できる設定のみを管理
		→ ユーザーが設定できない (つまりスコープがアプリケーションの設定) 項目は、従来通りの管理

	○設定ウィンドウの設定項目
		・システムと画面設定
			・ビデオカード選択（コンボボックス）
			・ウィンドウモード（チェックボックス）
			・FPS（ラジオボタン） 自動 or 30
			・メモリ使用量優先 or 動作速度優先
			
		・モードと作曲動作の設定
			・ひとりでおんがく無効
			・つなげておんがく無効
			・ものがたりおんがく無効
			
--------------------------------------------------------------------------------------------------------------
090308
	○提出ボタンと提出確認ダイアログを実装
		→ 提出ボタンのラベルは未実装
		→ 提出機能も未実装  つまり形だけってことサ

--------------------------------------------------------------------------------------------------------------
090301 〜 090302
	○物語再生画面の基本機能が完成
		→ 旧版と同様の動作が可能となった
		→ 再生画面は汎用クラスとして作成 (別な人が作った作品の再生だけを行う場合とかあるかもしれない)
		→ 再生の為の StoryPlayer クラスと ScorePlayer クラスを作成 (Muphic.Tools.Player 名前空間)
			→ 再生専用のクラスなので、Play メソッドが１フレーム毎に呼ばれる環境であれば、再生画面でなくても
			   物語や曲の再生が可能になった。
			   物語作成画面で、現在のスライドの曲を聴く機能とかつけられるかも？
		→ スライド間 (幕間) フレームは規定で60に設定。
			→ ただ、曲が無いスライドの場合は少し延ばした方がいいかも
	
	○作曲画面の内部構造を変更
		→ 物語作成画面と同じく、楽譜データとなる各要素を ScoreData 型の CurrentScoreData で集中管理する形に
		→ 保存/読込 とか 物語作成->物語作曲 でのデータ受け渡しはスムーズになった
	◇作曲画面 ver.2.2.1
	
	○スライドデータ (Slide クラス) の要素を変更
		→ 動物リストとテンポを個別に保持する形から、楽譜データ (ScoreData クラス) で保持する形に変更
		→ これまた 物語作成->物語作曲 でのデータ受け渡しはスムーズになった
		→ あと楽譜作成時のバージョンも保持できるようになったので、物語の曲を作成する際に、ひとりでおんがくで
		   作成した既存の楽譜を読み込んだりできるようにするのも面白いかもしれない。
		   (ただしこれやると絵から想像するという本来の趣旨から外れるような気がするので注意？)
	
	○スプラッシュウィンドウにバージョン表示
		→ メインウィンドウが表示されるまで、デバッグウィンドウのラベルが表示されない問題は、文字列設定した後
		   Application.DoEvents を呼ぶことであっさり解決
	
	○汎用作曲画面と汎用物語再生画面の Dispose メソッドの仕様をちょっと修正
		→ オーバーロードメソッドで、統合画像を解放するかどうかを指定できるようにした
		→ これに伴い、既に読み込まれている統合画像を読み込もうとしたときはエラーでなく正常動作扱いに変更
		→ 問題は、実際に画像を解放すべきかどうかについて
			→ 作曲画面は、出前授業での頻度から考えると解放せず保持し続けた方がいいような気がする

	☆現時点での未解決バグor未実装機能
		→ 物語再生画面で、保存/読込後から変更を加えずに戻るボタンを押したら確認ダイアログを表示しない機能
			→ 物語データの比較機能作ればすぐなんですけどね。面倒なんですよ。ハイ。
		→ 物語再生画面で、再生開始/終了時にステージの幕を開け閉めする機能
			→ 幕を開けると同時にステージを暗くして、幕を閉めると同時にステージを明るくしたいね。
		→ 楽譜画面 (そういえば作ってねぇ！！！！！！！ 自分担当した機能なのに)
			→ 学会終わった後ね。
		→ #バグ# 物語作曲画面で、新規作成ボタンを押すと規定の曲名まで消えてしまう。
			→ 解決の糸口なし (力業でなら簡単なんだけど、もっとスマートな方法模索中) 
		→ #バグ# 人物と動物のスタンプの表情が違う (喜→楽に、楽→喜になってる)
			→ 画像一覧ファイルを置換して一気に片付けまっしょい
		→ ネットワーク機能
			→ 児童専用モードをまず作らにゃならん。その後、特定のネットワークパスにファイル落とす機能を実装
		→ #バグ？# 物語作成画面統合画像に問題 (スタンプ一部切れてる and 表情潰れて見えない)
			→ 稲部に頑張ってもらう
	
	○新バージョン "くまさんパーティー♪" 作ってみた
	
	◇muphic ver.7.5.3.3
--------------------------------------------------------------------------------------------------------------
090225
	○削除ボタンの仕様変更
		→ 削除モードの間は Pressed を true にするよう変更
		→ ボタン画像修正  汎用長方形ボタンにオレンジ色追加  あと配置換え（後の拡張のため？）
	
	▽ダイアログ作成
		→ もどるダイアログは、保存後に変更が加えられていなければダイアログ表示しないようにしたい
			→ 保存したら、保存したデータを LastSaveData みたいに残しておいて、戻るボタン押下時にデータが一致
			   するかチェック。一致したらダイアログ表示しないようにしよう。そうしよう。
			→ 一致しなかったら保存ダイアログ出せばいいね。うん。
	
	○印刷を除く５つのダイアログを全て実装
		・新規作成ダイアログ
		・物語保存ダイアログ
		・物語読込ダイアログ
		・スタンプ全削除確認ダイアログ
		・ものがたりおんがくモード終了確認ダイアログ
		→ 終了確認ダイアログで"いいえ"を選択した場合、物語保存ダイアログに移動するようにした。
		   （移動後の保存ダイアログで保存した場合、トップ画面に戻る。保存しなかった場合は物語作成に戻る。）
	
	○ものがたりおんがくモード  物語再生を除く基本機能が全て完成
	◇muphic ver.7.5.2.1
	
	☆保存or読込後に、物語データが改変されていなければ、戻るボタン押下時にダイアログ表示せず直接トップ画面に
	  戻る機能を追加したい。
	  	→ 通常のコピーでは参照先が変わらないので意味がない
	  	→ シリアル化することでディープコピーを作成することはできた。しかし別々の参照先のインスタンスが持つ
	  	   フィールドのみを比較する方法が判らない為、これでもダメ？
	  	→ GetHashCode メソッドを活用しようと試みるも、物語データ改変後のハッシュ値が変わらないので使えない。
	  	   ハッシュはインスタンスフィールドのうちいくつかを合わせて XOR とってるらしい。参照型フィールドには
	  	   何の意味もない？
	
	☆ネットワーク機能の実装
		→ 児童用動作時は、"いんさつ"ボタンが"せんせいにだす"ボタンに変わるようにすれば画面デザインはＯＫ。
--------------------------------------------------------------------------------------------------------------
090220 〜 090223
	○物語再生画面の統合画像ファイル第１版が完成
		→ 画像上部とカテゴリ選択ボタンラベル右下の空白部分は、将来拡張のため
		→ 残りは、主にダイアログ関係の画像となるでしょう
	
	▽物語作成画面 怒濤の結合＆デバッグ作業
	
	○絵のフレームは上下左右分割し描画するよう変更 位置修正まで完了
	
	○実行中に例外が発生した場合、なんか全部 UnhandledException で引っかかってるっぽい
		→ 一応問題ないけど、Application.ThreadException が何の役にも立たなくなってしもうた
	☆暇なとき原因究明
	
	○システム設定の設定名の "Enable*" を "Enabled*" に変更
	
	☆題名入力画面で決定した題名を、物語作成画面に反映させる方法について
		→ 現在は、汎用題名入力画面を継承した専用の入力画面を作成している
		   しかし、汎用題名入力画面を直接利用する形でも実現できる
		   	→ 決定ボタンも汎用題名入力画面内で定義し、決定ボタンがクリックされたことを示すフィールドを用意。
		   	   親画面のクリック時に決定ボタンが押されたかどうかを判定するコードを追加し、決定ボタンが押されて
		   	   いれば、ScreenMode を親画面に戻す。
		   	   入力された題名は、画面遷移時 ScreenMode のプロパティ内で、汎用題名入力画面解放前に取得する。
		→ ただし、専用画面を作成することで（現状では存在しないが）専用の機能を追加することもできる
		→ よって、（せっかく継承した画面作ったし）現状の方法で行うことにする
		   （上記のように汎用画面を直接利用できることも頭に入れておくと後に使えるかもしれない）
	
	○両サイドのカテゴリ選択ボタンと、背景・アイテム選択ボタンが正常に動作することを確認（詳細なテストはまだ
	▽追尾クラスの整備
	
	○追尾クラスの整備 １つ完了
		→ 以下のルールに従い追尾対象画像の描画を行う
		   ・追尾対象画像が絵に収まってる場合、絵の中で追尾
		   ・選択ボタンが押されてから、追尾対象画像が最初に絵に収まるまでは、選択ボタン周辺でも追尾（半透明）
		   ・上記以外は追尾しない
	
	○絵内の座標と画面座標について
		→ 物語作成では全て画面座標に統一し、保存/読込の時のみ絵内のローカル座標を使用する仕様にした
	
	○スタンプの削除機能実装  追尾クラスの仕事が多すぎる…
	○サムネイル基本操作機能実装  物語作成画面は旧バージョンと中身が全然違うぜよ…
	○DrawManager更新  縮小率指定の描画機能を実装  Drawメソッドのオーバーロードが15…
	
	○サムネイル機能完成
		→ 編集用のメインのスライド描画と、各サムネイルの描画は全て同じメソッドで行うような構造となった
		   （描画するスライド・描画の基点位置・縮小率を指定することで、全て同じメソッドで実現）

	○物語の作曲画面のサムネイル実装
	○その他デバッグ用配布に向け簡単な整備（デバッグウィンドウの配置換えとログメッセージ修正）
	
	◇muphic ver.7.5.1.4
	
	☆現在確認されている不具合一覧
		・作曲画面の"あたらしくつくる"ボタンで曲をクリアすると、曲名（○ページ目）まで消えてしまう
--------------------------------------------------------------------------------------------------------------
090213
	○DrawManager のメソッド命名法変更
		→ インスタンスから呼ばれる private メソッドは、全て頭に"_"を付けたPascal記法に変更
		   えー、他の管理クラスも全部やんの？ (´Ａ`)ﾛｯﾌﾟﾝﾊﾟｰﾝ
	○全管理クラスの、内部メソッド命名法を変更
	
	○ログファイル管理クラスを大幅修正
		→ ログメッセージ生成コードを、汎用ツールクラスに移動しメソッド化
		→ タイトル部とメッセージ部の間にスペーサを挟む構造に変更
		   （タブで揃えたようにある程度綺麗に表示されるようになった）
		→ ロギング開始時のメッセージを修正 ヘッダを追加
	
	○Release ビルド時にログファイルに書き込まれる内容の大半を、リテラル直接指定から文字列リソースへ移動
	
	○作曲画面で、既に動物がいる場所では追尾せず、選択中であることを表す矩形の枠を表示するように変更
		→ DrawManager に DrawLine メソッドを追加。DirectX の 2D ライン描画にて実現
		   （ただし、Sprite 描画中に Line の描画ができないため、毎回 Sprite 描画を中断させる必要がある）
	◇作曲画面 ver.2.2.0
	
	◇muphic マイナーバージョンアップ ver.7.4.0.0
--------------------------------------------------------------------------------------------------------------
090212
	○ログ/メッセージ表示周りの修正
		→ 文字列リテラル直接記述のメッセージの一部をリソースに移行（Manager系, TopScreen, 画面遷移箇所, 他）

	▽PictureWindow クラスの作成
		→ 旧バージョン参考
	
	▽物語作成時も、既に配置したスタンプをドラッグで移動できるようにしたい。
		→ 案１：ドラッグ用の追尾モードを用意する    ← モード追加したら操作が増え煩雑になる
		   案２：追尾OFF時にドラッグできるようにする ← どうやって追尾OFFにするか考えないといけない
		→ 切り替え？  低学年用動作（配置したスタンプは移動できない）
		               中学年用動作（マウスを配置したスタンプ上に移動すると矩形が表示され、移動できる）
--------------------------------------------------------------------------------------------------------------
090116 〜 090117
	○システムトレイにアイコンを表示する機能を追加
		→ 動作中に設定変更する際などに使用
		→ 現時点では終了とウィンドウのアクティブ化（トレイアイコンダブルクリックでも可）の機能を実装
		→ アイコン画像はリソースから取得
	☆ただしメニュー内でもマウスポインタ消えるみたいね 非常に使い辛いわぁ
	
	○スプラッシュウィンドウを表示する機能を追加
		→ スプラッシュ画像はリソースから取得
	
	◇muphic ver.7.3.6
	
	○デバッグウィンドウ version 1.0 完成
		→ コンソール出力される内容がデバッグウィンドウにも出力される デバッグ丸投げする時とか
	
	○システム情報を取得し管理する SystemInfoManager クラスを作成
		→ Windows の種類、バージョン、ビルド番号、サービスパック、エディション名を判別
		→ ディスプレイアダプタ名と muphic 表示先のディスプレイの解像度も取得
	
	○起動フェーズをいろいろ修正
	○起動時の順番（上から順に
		・デバッグウィンドウ生成
		・多重起動チェック
		・ログ管理クラス生成（ロギング開始）
		・システム情報取得
		・デバッグウィンドウ表示
		・スプラッシュウィンドウ生成/表示
		・メイン画面生成 ...
		→ ログ管理クラスが早期に生成されるため、以降全ての起動フェーズでログ書き込み可能になった
	
	◇muphic ver.7.3.7
--------------------------------------------------------------------------------------------------------------
090112
	○メッセージウィンドウに表示する文字列を、リソースとして管理するよう変更。
		→ Properties.Resources.rsex 
		   （アセンブリリソースを自作すると何故かビルドエラー出るので、Properties 管理下のリソースに）
	
	▽ロギング周りの見直し（別に文字列２つに分けなくてもいいのでは？ あと文字列はリソースで指定したい）
		→ LogFileManager の書き込みメソッドは修正の必要なし？単に１つ目の引数しか使わないようにすればいいので
--------------------------------------------------------------------------------------------------------------
081224 クリスマスイヴも楽しくＣ＃
	○Screenクラスを修正
	  Screenクラスの派生クラス名で登録された画像のうちの一部は領域を示すためのもので、this.ToString()画像の
	  描画を行うべきではないケースが存在する（AnimalButtonsクラスなど）ため、新たにDrawPartsメソッドを作成。
	  	→ this.ToString()画像を描画したくない場合は、Drawメソッドから基底クラスのDrawPartsメソッドを呼べば
	  	   その画面の部品のみを描画できる。
	  また、Drawメソッド内でVisibleがtrueかをチェックするコードがあるが、Visibleがfalseの場合そもそもDraw
	  メソッド自体が呼ばれない筈であるため、コメントアウトしておく。
	  
	○ものがたりおんがくモードのツールクラスに、背景画像名を取得するメソッドを追加
	
	○物語作成の背景部分をちょこちょこと
		→ Slide クラスには背景の位置と空の２つの情報を持たせることに
		→ StampSelectArea の背景部分のコードが完成
	
	○物語の絵を描画する PictureWindow クラスを作成
		→ 背景・スタンプの描画 スタンプの追加・削除もこのクラスで行う
		→ 作曲画面の CompositionMain クラスのようなもの？
		→ 夜・曇のシーンでは絵全体が暗くなるようにしてみた
			→ 更に夜のシーンでは、星だけ明るくなるよう演出を加えてみた
	
--------------------------------------------------------------------------------------------------------------
081217 〜 081218
	○ものがたりおんがくモード実装中...
	
	○単位スライドのデータ（絵を構成するスタンプデータ・文章・曲・テンポ）を保持する Slide クラスを作成。
	○物語データ（規定数の Slide クラス配列と物語題名）を保持する StoryData クラスを作成。
		→ 上記２つのクラスはどちらも XML シリアル化を想定した上での実装。
	
	○物語の題名は Title クラスで管理するのではなく、StoryData クラスで管理することにした。
		→ Title クラスは、StoryData クラスの題名フィールドの文字列を表示するだけ。
	○同様に、物語の文章は Sentence クラスで管理するのではなく、Slide クラスで管理することにした。
	
	☆作曲画面の曲名部分も↑と同じような形にしようか。
	
	○DrawStatusArgs クラスに、ダイアログ表示中であることを表す ShowDialog フラグを追加。
	○再生中にダイアログ表示した場合、動物がその場で止まるようになった。
	
	◇muphic ver.7.3.4
--------------------------------------------------------------------------------------------------------------
081213 〜 081216
	○ものがたりおんがくモード実装中...
	
	○汎用題名入力画面を利用し、物語名入力画面と物語文入力画面を作成
		→ 入力画面からの戻るボタンは、それぞれの DecisionButton を用意して実装
	○汎用作曲画面を利用し、物語作曲画面を作成
		→ 作曲画面からの戻るボタンのラベルは"けってい"の方がいいかもしれない。
		   ラベル画像 IMAGELIST_MAKESTORYSCR_SCORE_DECISIONBTN を用意し、こちらを描画するようにすべきか。
	
	☆「メモリ使用量低減を優先」と「動作速度向上を優先」の２つのモードを用意した方がいいかにぇ。にしし
	
	○クリック判定厳しすぎた問題を修正
		→ マウスボタンが押された時点と上がった時点での指してる部品が一致したらクリックできるようにした。

--------------------------------------------------------------------------------------------------------------
081112 〜 081113
	○muphic 起動周りの修正
		→ DirectX 未インストール状態では、その旨を表示するようにした（正規エラー扱い）
		→ ただし、DirectX のチェックは PresentParameters オブジェクトを生成してるだけ これでいいん？
	
	○VMware で256MB動作確認 新バージョンは「40MB弱」
--------------------------------------------------------------------------------------------------------------
081101 〜 081105
	○本格的に物語作成画面のコーディングを開始（The Y氏 からの連絡がないため画像作成を中断）
	○物語作成画面と全然関係ないが、作曲画面のテンポ操作ボタンの効果を逆にした。左の方が早くなる。

	○ものがたりおんがくでの追尾物の名称は"スタンプ"で統一
	○旧版と違い、カテゴリボタンやスタンプ選択ボタンは個別に作成せず、それぞれ１つの汎用クラスのみで実装する。
		→ カテゴリボタンは CategoryButton クラス。 MakeStoryScreen クラスから制御。
		→ スタンプ選択ボタンは StampSelectButton クラス。 StampSelectArea クラスから制御。
			→ 実質 StampSelectArea クラスが最もカオスになりそうな予感
	
	▽登場人物クラス Character から、追尾・貼り付け用画像名を生成するクラス or メソッドが必要ね。
	☆描画時に毎回画像名を生成するのでは負荷がかかりすぎる。
		→ 対処法１：描画を行うクラス内に List<string> を作成し、画像名の登録・削除を行う。
		→ 対処法２：Stamp クラス内に画像名を保持するフィールドを作成（その場合画像生成はどこでやればいい？）
	▽現状、上記問題は対処法２で進めることとする。
	
	☆登場人物のスタンプ画像は、表情と向きすべてのパターンの画像を用意するか、プログラムで生成するか。
		→ 描画メソッドでは、if(stampData[i] is Character) が true ならパーツ毎に描画する、みたいな
		→ よく考えたら、表情４種＋体 よりも 表情付き４体 の方が画像少なく済んでしまうという
		→ 登場人物一人につき 表情４種 * ３方向 + 後ろ向き = 13種の画像？
	
	○ScoreTools 同様、ものがたりおんがく全般で使用する StoryTools クラスを作成
	○登場人物の種類・表情・向き（それぞれ列挙体）データから、画像名を生成するメソッドを作成
	
	○スタンプ選択ボタン管理クラスの登場人物クリック処理が完成
	○これからデバッグ
	
--------------------------------------------------------------------------------------------------------------
071014 〜 081031
	○画像データ作成に尽力
	
	○従来通り物語の背景画像を個別に24パターン用意したところ、それだけでサイズが20MB近くになってもうた
		→ そこで、風景画と天気画に分けてプログラム内で背景を生成する方式に転換。画像数は半分近くになった
	☆曇り・夜の時は、それぞれ 10% or 20% 透過させた黒画像を上から描画することで、暗さを表現できる？
	
	☆画面下部の追尾物選択ボタンのラベル画像のイラストレータのソースが無いことが判明
		→ 石澤氏に要請完了
	
	☆用意すべき画像が多すぎます。カオス。ああああああああああああああああああああああああああああああああああ
	
--------------------------------------------------------------------------------------------------------------
081011 〜 081013
	○内部構造を修正 Dragメソッドをすべて廃止し、StatusArgsクラスを実装
		→ EventArgsを真似た構造 ドラッグする際はMouseMoveメソッド内で、StatusArgsのプロパティから判断する
	
	○汎用ダイアログにファイル選択機能を追加
	○ひとりでおんがくモード ファイル読み込み機能実装
	◇muphic ver.7.3.0
--------------------------------------------------------------------------------------------------------------
081005
	○作曲画面で、新規作成時にテンポがクリアされないバグを修正
--------------------------------------------------------------------------------------------------------------
081001 〜 081003
	○自動保存機能実装
		→ 自動保存のイベントを作成 フレーム管理クラスで設定された時間間隔毎にイベントが呼ばれる
	
	◇muphic ver.7.2.4
--------------------------------------------------------------------------------------------------------------
080928 〜 081001
	▽題名入力画面の完成
	▽楽譜読み込みダイアログの完成
	▽公開デバッグ用資料作成
	
	○楽譜データはXMLファイルで入出力を行うことに決定
	○保存用のクラスをシリアル化し、XMLファイルに保存/読込を行うメソッドを作成
	
	○題名入力画面がひとまず完成
		→ 押しても意味がないボタンは押させない 受け入れられるかはまた別として
		→ 起動時間から簡易アニメーションを試してみた 500ミリ秒以下なら表示すると、0.5秒毎に切り替わる
		→ 文字の縦幅は19pxから20pxに変更 一部アルファベットが正しく表示できなかったので
	
	☆イラストレーターからベクトルデータとして画像を持ってこれることが判明
		→ ひとりでおんがくのいくつかのボタンラベルは作り直した方がよさそうである
	
	○1オクターブ上のレの音を作成  聞々ハヤえもん作者のタロ氏に感謝
	○ZAWAISHIファンタジスタのアレンジを作成 次の出前授業で使ってみたい
	
	○公開デバッグ用に、クラッシュ時はメッセージボックス表示とログ出力を行うよう改良
	
	◇muphic ver.7.2.0
--------------------------------------------------------------------------------------------------------------
080926 〜 080927
	○汎用ダイアログの仮実装
	
	○NowLoading画面の実装
	◇muphic ver.7.0.5
	
	○ログファイル出力機能実装
		→ 通常出力及びデバッグ出力を実装 デバッグ時はコンソール出力と同時にファイルにも出力できるようになった
	◇muphic ver.7.1.0
	
	○StringManager改良 作曲画面の看板表示を正常な描画に修正

--------------------------------------------------------------------------------------------------------------
080924 〜 080925
	○Alt+Enterでのウィンドウ/フルスクリーンモード切替を確認 ビッグバンテスト成功
		→ こんなにアッサリうまくいくとは思いませんでした。
	◇muphic ver.7.0.2
	
	○フルスクリーン時にポインタ位置がおかしいバグを修正
		→ ウィンドウ/フルスクリーン切替時にフォームのキャプションバーの表示/非表示を切り替えた
	◇muphic ver.7.0.3
	
	☆作曲中の仕様に関して
		・ドラッグ中は追尾させない方がいい？
		・既に動物がいる位置では追尾させず、選択用フォーカスとかあるといい？
	
	○統合画像を削除してもクラスで使用した画像名や座標が残ってしまう問題を解決
		→ 登録時にBeginRegistメソッドを呼べば、登録番号が得られる。解放時に登録番号を指定して一括削除。
	
	○ダイアログ開発方針を決定
		→ ダイアログはScreenクラスを継承して作成
		→ ボタンやファイル選択等のパーツは汎用ダイアログ側で用意
		→ ダイアログタイトルやメッセージは各画面で用意
	
	○ボタンにPressedプロパティを追加 ボタンが押されている時にtrueになる。
		→ これにより、ON状態でもマウスオーバー時はstate1になる
	◇muphic ver.7.0.4
	
	☆NowLoadingはダイアログにしてはどうか？
		→ 採用してみる DrawManagerにダイアログクラス作成、NowLoading描画時はDrawメソッドを呼ぶ
	
	○統合システム画像が完成

--------------------------------------------------------------------------------------------------------------
080922 〜 080923
	▽汎用作曲画面の完成
		→ SoundManagerが仮実装されたので、音声の再生部分を追加
		→ 題名入力/表示部と、ファイルの入出力を実装
	
	▽ひとりでおんがくモードの実装
		→ 汎用作曲画面を継承
		→ 画面遷移の整備 NowLoadingをどうするかも考える
	
	○ScreenクラスのPartsListをArrayListからList<Parts>に変更 今のところ弊害なし
	
	☆スクロールするとドラッグできないバグを確認
	○↑解決 CompositionMainクラスDragメソッド内のReplaceメソッド呼び出し時の引数にミス
	
	○フルスクリーン時でもデバイスロストしたら再取得するよう改良
		→ デバイスロスト中でもApplocation.DoEvent()が呼ばれるように修正（こうしないと最小化から復帰できない
		→ DrawManagerにDisposeメソッドを実装し、メインループ脱出後にデバイスやテクスチャを解放するよう修正
	
	○全ての管理クラスをシングルトンパターンに変更
		→ ただしアクセス方法は従来からの変更無し クラス内のstaticメソッドからアクセスする
		→ メインウィンドウのコンストラクタ内でシングルトンの生成とクラス変数の初期化を行う
	
	○ひとりでおんがくモード実装 画面遷移確認
	○トップ画面に戻る際に統合画像と各画像名を削除するよう改良 メモリ使用量の削減を確認
	◇ひとりでおんがく ver.1.0.0
	
	☆統合画像を削除してもクラスで使用した画像名はTextureNameManager、矩形はRectangleManagerに残ってしまう
	  何か効率の良い削除方法を考えないとダメ？
		→ ScreenクラスにRegistListを設けてみてはどうか？
	
	○音声再生部分追加 レ以外の音は再生可能になった メモリ使用量も問題なし
	○SoundFile.settingsを廃止 Resource.settingsに音声や画像ファイルのパスを保存するよう変更
		→ 統合画像ファイルはパスを直接指定
		→ 音声ファイルはディレクトリ名だけ指定し、再生時にファイル名生成
			→ ScoreToolsにファイル名生成メソッド作成
	
	○ウィンドウ/フルスクリーンモードの切り替えを行うコードを追加
		→ ただし正常に動作するかは未知数なので学校で要確認
		→ これに伴い、デバイス設定・デバイス生成・デバイス再生成などのコード細分化
		→ Alt+Enterキー入力の判定を追加 ついでにキー入力メソッド内を整備
	
	○手動でのバージョン管理開始 Subversion導入したいよぅ
	
	◇muphic ver.7.0.1	
--------------------------------------------------------------------------------------------------------------
080919 〜 080921
	○スクロールバーの整備完了
		→ スクロール時の動きを旧版から変更 バーの中央をマウス位置にずらすことなくスクロール可能になった
	
	▽音鳴らす
	▽ひとりで音楽本実装と画面遷移の整備
	
	○SoundManagerの実装
	○Fatalなエラー発生時のエラーメッセージの充実
	
	○プログラムのメインループはMainScreenクラス内のbool型Runningフィールドがtrueの間に実行されるよう修正
		→ 各所でプログラムを終了する際はRunningフィールド値をfalseにする
	○デバイスロスト時にデバイスを再生成するコードを追加
		→ 長年の問題が遂に解決 ただしフルスクリーン時でも正常に動作するかは未確認のため、学校で要確認
	
--------------------------------------------------------------------------------------------------------------
080912 〜 080915
	○共通作曲画面を仮実装
	
	▽現時点での問題点
		・テンポ表示のズレ											○解決
			→ 統合画像の修正が必要 リストの書き換えを伴うため面倒
		・テンポ最遅だと再生されない								○解決 旧版と同じスピードとなった
		・領域外に配置できてしまう									○解決
			→ Animals移植時に抜いたコードを調べてみる？
		・楽譜領域と動物ボタン間で追尾動物が一瞬消えるのは何故？	○解決
		・音が鳴らない
			→ うまくメモリ管理できる方法を考える
	
	▽問題点の修正後、ひとりでおんがくを本実装

--------------------------------------------------------------------------------------------------------------
080825 〜 
	▽共通作曲画面の完成
	
	○自動プロパティを使用するように変更
		→ 全クラスの殆どのフィールドを排除し、プロパティ化を行った
		→ 各Managerのstaticインスタンスのプロパティ名は全てInstanceに変更。たぶんこっちのがわかりやすい
		
	○Muphic.Settingsを作成 各種設定ファイルの格納が目的
		→ PartsLocation.settingsを作成 各パーツの表示座標をここで一元管理する
			→ Screenクラスにはprotectedな簡単アクセスメソッドなぞ設けてみた 戻り値はPoint型限定
		→ さらに設定ファイルは増える？ 各所で使用する統合画像のパスなども管理できるかもしれない
	
	
	○各動物ボタン完成 次は追尾
	○多重起動阻止のコードを追加
	
	☆動物のサイズや細かい座標が必要な段階になったようだ…
	
	○各管理クラスで使用していたHashTableを、Dictionaryジェネリッククラスに変更
		→ キャストによる処理時間とエラーのリスクを低減

--------------------------------------------------------------------------------------------------------------
080823 〜 080824
	▽共通作曲画面 の完成
	
	☆起動時のコマンドライン引数で設定モード起動なぞ作ってみてはどうだろう ConfigurationFormを別に作ってさ
		→ 引数付きでmuphic起動するだけのmuphic設定.exeとかそれに近いショートカットとか作ればいい
		→ LINQ使えばXML編集できるし、同じプロジェクト内に設定フォームがあればSettingsを直接いじれる

--------------------------------------------------------------------------------------------------------------
080814
	▽共通作曲画面の開発開始
	
	○共通作曲画面で管理するパーツの洗い出し
		→ 再生ボタン・途中再生ボタン・楽譜ボタン・
	
	☆作曲画面のデータ保持方法 16小節分の領域確保して、動物が置かれたらそれに対応する位置を書き換える方式は？
		→ 再生専用ツールなんかも作れるかもしれない

--------------------------------------------------------------------------------------------------------------
080813
	▽フォントの生成 FPSとマウス座標を画面に表示できるようにする
	▽必要があればFPS管理クラスの見直し FAGAの参考に
	▽文字画像と一覧ファイルの作成
	
	☆NowLoadingの進度バーは無理？ ちょっと待ってねだけ表示して軽いアニメーションつけたらどうか
	
	○フォントの生成完了 デバッグ用なので細かい設定は割愛
	○デバッグ用にマウス座標とFPSを画面に表示するよう改良
	○描画の際、クラス名だけでなく、画像名を直接指定しても描画できるよう改良
	
	○フレーム制御をFAGA方式に変更 それに伴いフレーム管理クラス FrameManager 作成 FPS60で安定
		→ 遅延にThread.Sleepを使用するとReleaseで何故か落ちる
		→ それ以前に遅延させていないのにFPS60で安定する謎 DirectX側で何かやってる…？
	○プログラムをMainメソッド内でループさせる方式に変更
	
	○文字列管理クラス StringManager 作成 しかしこれといった特別な管理は行っていない…
	○文字列画像化完了 記号以外はメイリオ18pt 記号はMSゴシックEx18pt
		→ 改行等面倒なことは行っていない
	
	☆毎秒40KBずつメモリ使用量が増えていく現象を確認
		→ sprite か device あたりが何かやってる？ FrameManager 内も確認 List<double> Process 辺りが怪しい
		→ Releaseで実行すると、41MB → 40KBずつ増加 → 43MB → 突如38MB で以降増えず わけわからん

--------------------------------------------------------------------------------------------------------------
080812
	▽DirectX周りの整備
		→ 画像登録・描画クラスの修正 トップ画面までの動作を目指す
	
	○デバイス生成でメモリ使用量15MB跳ね上がることが判明 どうしようもねー
	○ﾌｫｰﾑ初期化11MB ﾃﾞﾊﾞｲｽ生成28MB(+17) ﾄｯﾌﾟ画面ｲﾝｽﾀﾝｽ化40MB(+12) ｽﾌﾟﾗｲﾄ終了46MB(+6) ﾌﾟﾚｾﾞﾝﾃｰｼｮﾝ49MB(+3)
	○デバイス生成時の環境設定を細かく行ってみたところ、最終的にReleaseで41MB前後に落ち着いた
	
	○C#標準の命名規則に変更 全てのメソッド・メソッド引数名・フィールド名に適用
		http://www.asahi-net.or.jp/~dp8h-izn/cs_coding_standard.html
	
	○デバイス生成関連で参考にしたサイト
		http://www3.pf-x.net/~chopper/home2/DirectX/MD4.html
		http://sorceryforce.com/programing/directx/direct3d/base/initialize.html

--------------------------------------------------------------------------------------------------------------
080811
	○ConfigurationTable作成 プログラム動作に関する各種設定をHashTableで保持する
		→ ConfigurationTableで管理する設定情報を、muphic.ManagerのConfiguration.txtに一覧としてメモしておく
		→ 設定情報が記載された.iniファイルを用意し、起動時に読み込ませる？
			→ ゆくゆくは設定用の専用ツール作成もしたい
	○DrawManagerにDirectXを復活
		→ フルスクリーン処理は未実装
		→ デバイス生成は１アクションのみ
	
--------------------------------------------------------------------------------------------------------------

だから何でこの期間開発履歴書いてねぇんだよぉぉぉぉぉぉぉぉぉ

--------------------------------------------------------------------------------------------------------------
080714〜080715
	○Screenクラス完成（チュートリアル中のクリック制限は未実装）
		→ 前バージョンからの変更は特になし（BaseListの名前をPertsListに変更した程度）
	
	○DrawManagerでの画像ファイル管理方法について
		→ HashTableのImageTableで管理する。画像一覧ファイルパスをキーとし、統合画像本体を格納、
	
	
	以後のJOBs
	
	▽問題は、DrawImageによる部分描画 これはもう諦めるしかない？
	▽次の手は…
		→ 統合画像を使用せず、従来通りバラバラの画像を使用する
			→ HDDのオーバーヘッド等の理由で読み込みが極端に遅くなる可能性あり（従来と同じ）
			→ アーカイバを使い単一ファイルにしておくと読み込み速度の問題は解決？
		→ DirectXを復活させ、Splite描画に切り替えてみる
			→ メモリ使用量の問題が再発する可能性あり
			→ 環境導入が面倒になる
	
	▽とりあえず、従来と同じバラバラ画像でどの程度のメモリ使用量と動作速度になるかを検証する
	
--------------------------------------------------------------------------------------------------------------

何でこの期間開発履歴書いてねぇんだよぉぉぉぉぉぉぉぉぉ

--------------------------------------------------------------------------------------------------------------
080507-080508
	▽トップ画面の動作確認に向け、トップ画面用画像を用意
	○実験用簡易版を用意 座標記述txtも簡易版作成完了
	
	○FPS制御を実装
	
--------------------------------------------------------------------------------------------------------------
080502〜080503
	○ひとりで音楽画面 新デザイン完成
	  以下主な変更点
		→ １オクターヴ上のレの音を追加 ソシレ和音の利用の幅拡大のため
		→ レ音追加に伴い、道領域上部にあった全てのボタンを移動
			→ １音削除ボタンは動物ボタン群の下へ移動
			→ 全削除ボタンは「新しく作る」ボタンとして入出力ボタン横へ配置
			→ 楽譜ボタンは道の上へ移動
			→ 音声録音ボタン破棄 マイクが利用できる環境が少ないため
		→ スペースの都合上、従来のテンポボタンでは収まらないため、新テンポボタンを利用
			→ 左右の矢印ボタンでテンポを選択する形式へ変更
		→ 道の音階の幅と家の窓の幅を、それぞれほぼ等間隔になるよう微調整
		→ 小節表示用の看板を微調整 メイリオ14ptに最適化
		→ 題名入力・ファイル入力・ファイル出力・新規作成ボタンに同じ形のボタンを採用 メモリ使用量削減のため
		→ 曲名は20文字まで表示可能 何文字で制限するかは未定
		→ 背景の黄色濃度を50％に低減
	
	○ものがたり作成画面 新デザイン完成
	  以下主な変更点
		→ 全体的に無駄なスペースを無くすような配置へ
			→ 六角形ボタン, 題名ボタン 等
		→ 題名入力・文章入力・ファイル入力・ファイル出力・新規作成ボタンに同じ形のボタンを採用
		→ 物語タイトルは18文字まで表示可能 18文字で制限するかは未定
		→ 文章は31文字まで表示可能 31文字で制限はしない予定 表示しきれない場合最後の文字を「…」にする
		→ 背景の黄色濃度を50％に低減
	
	☆デザイン変更に伴い物語のアス比に問題 縦伸びになってしまう
		→ 背景画像作成時に画像の左右を削り調整を行う
	
	☆画面解像度低下の影響もあり、サムネイルが非常に見難い
		→ 後に個々のサムネイルサイズを極力大きくなるよう調整する必要あり
	
	☆六角形ボタン及び配置用青丸ボタンは３ステート用意する必要あり 色未定
	
	▽システム用に数字画像を別途用意する必要あり サムネイル番号と小節番号用に メイリオ14ptを予定
	▽背景濃度変更の裏付けが欲しい 色彩工学等の観点から調べる必要あり

--------------------------------------------------------------------------------------------------------------
080426〜080427
	○ひとりで音楽画面 新デザイン設計中
		→ １オクターブ上のレの音を追加
		→ それに伴い、道の上部を削除
		→ 動物削除ボタンは動物ボタン一番下へ配置、全削除ボタンは「新しく作る」ボタンとして入出力ボタン横へ
		→ 目に悪いため背景の濃度を50％に薄めた
		→ 新テンポボタン
	
	▽小節分けの看板を大きく メイリオ20pt対応のため
	▽音声録音ボタン位置
	▽再生ボタン２つは必要なのか？

--------------------------------------------------------------------------------------------------------------
